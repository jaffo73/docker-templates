version: "3.2"

services:
  proxy:
    image: traefik:v2.3
    command:
      - "--configFile=/config/traefik.yml"
    env_file:
      - config/docker.env
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - data:/data
      - config:/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - external_network
    deploy:
      placement:
        constraints:
          - ${DEPLOY_NODE_WEB:-node.labels.ignore != true}
      labels:
        - "traefik.enable=true"
        # 全局重定向匹配路由规则，这里匹配了所有路由
        - "traefik.http.routers.http2https.rule=HostRegexp(`{any:.+}`)"
        # 入口点选择上面配置的webhttp入口点
        - "traefik.http.routers.http2https.entrypoints=webhttp"
        # 路由中间件
        - "traefik.http.routers.http2https.middlewares=https-redirect"
        - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
        # 最最关键的一步，创建一个noop虚服务的loadbalancer，port随便选，不然上述重定向配置不会生效
        - "traefik.http.services.noop.loadbalancer.server.port=9999"

networks:
  external_network:
    external: true

volumes:
  data:
    driver_opts:
      type: "nfs"
      o: "addr=$DEPLOY_NFS_HOST,nolock,soft,rw"
      device: ":$DEPLOY_NFS_ROOT/traefik/data"
  config:
    driver_opts:
      type: "nfs"
      o: "addr=$DEPLOY_NFS_HOST,nolock,soft,rw"
      device: ":$DEPLOY_NFS_ROOT/traefik/config"
