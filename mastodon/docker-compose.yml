version: "3.8"

x-logging: &loki-logging
    driver: loki
    options:
      loki-url: "${DEPLOY_LOKI_URL}"
      loki-retries: 5
      loki-batch-size: 400

services:
  db:
    image: postgres:9.6-alpine
#    logging: *loki-logging
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    volumes:
      - postgres:/var/lib/postgresql/data
    deploy:
      replicas: 1
      placement:
        constraints: 
          - ${DEPLOY_NODE_DB:-node.labels.ignore != true}

  redis:
    image: redis:6.0-alpine
#    logging: *loki-logging
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - redis:/data
    deploy:
      replicas: 1
      placement:
        constraints: 
          - ${DEPLOY_NODE_REDIS:-node.labels.ignore != true}

#  es:
#    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.10
#    logging: *loki-logging
#    environment:
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - "cluster.name=es-mastodon"
#      - "discovery.type=single-node"
#      - "bootstrap.memory_lock=true"
#    networks:
#      - internal_network
#    healthcheck:
#      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
#    volumes:
#      - ./elasticsearch:/usr/share/elasticsearch/data
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1

  web:
    image: tootsuite/mastodon:v3.2.0
#    logging: *loki-logging
    env_file: ./config/production.env
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:3000/health || exit 1"]
    depends_on:
      - db
      - redis
#      - es
    volumes:
      - system:/mastodon/public/system
    deploy:
      replicas: 1
      placement:
        constraints: 
          - ${DEPLOY_NODE_WEB:-node.labels.ignore != true}
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.mastodon_web.rule=Host(`mastodon.${DEPLOY_HOSTNAME}`)"
        - "traefik.http.routers.mastodon_web.entrypoints=webhttps"
        - "traefik.http.routers.mastodon_web.tls.certresolver=le"
        - "traefik.http.services.mastodon_web.loadbalancer.server.port=3000"

  streaming:
    image: tootsuite/mastodon:v3.2.0
#    logging: *loki-logging
    env_file: ./config/production.env
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1"]
    ports:
      - "0.0.0.0:4000:4000"
    depends_on:
      - db
      - redis
    deploy:
      replicas: 1
      placement:
        constraints: 
          - ${DEPLOY_NODE_STREAMING:-node.labels.ignore != true}

  sidekiq:
    image: tootsuite/mastodon:v3.2.0
#    logging: *loki-logging
    env_file: ./config/production.env
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - system:/mastodon/public/system
    deploy:
      replicas: 1
      placement:
        constraints: 
          - ${DEPLOY_NODE_SIDEKIQ:-node.labels.ignore != true}
## Uncomment to enable federation with tor instances along with adding the following ENV variables
## http_proxy=http://privoxy:8118
## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
#  tor:
#    image: sirboops/tor
#    logging: *loki-logging
#    networks:
#      - external_network
#      - internal_network
#
#  privoxy:
#    image: sirboops/privoxy
#    logging: *loki-logging
#    volumes:
#      - ./priv-config:/opt/config
#    networks:
#      - external_network
#      - internal_network

networks:
  external_network:
    external: true
  internal_network:
    internal: true

volumes:
  config:
    driver_opts:
      type: "nfs"
      o: "addr=$DEPLOY_NFS_HOST,nolock,soft,rw"
      device: ":$DEPLOY_NFS_ROOT/mastodon/config"
  system:
    driver_opts:
      type: "nfs"
      o: "addr=$DEPLOY_NFS_HOST,nolock,soft,rw"
      device: ":$DEPLOY_NFS_ROOT/mastodon/public/system"
  redis:
    driver_opts:
      type: "nfs"
      o: "addr=$DEPLOY_NFS_HOST,nolock,soft,rw"
      device: ":$DEPLOY_NFS_ROOT/mastodon/redis"
  postgres:
    driver_opts:
      type: "nfs"
      o: "addr=$DEPLOY_NFS_HOST,nolock,soft,rw"
      device: ":$DEPLOY_NFS_ROOT/mastodon/postgres"
